apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: verify-attestation-signature
spec:
  params:
    - name: TASK_LABEL
      type: string
      description: The label to identify the task
      default:  kaniko-chains
  steps:
    - name: cosign-verify
      image: quay.io/redhat-appstudio/appstudio-utils:8bc9c0814143d8fb0c6a9be59227362e772624b5
      script: |
        #!/usr/bin/env bash

        counter=0
        timeout=30
        TASKRUN_NAME=`tkn tr list --label tekton.dev/task="$(params.TASK_LABEL)" |awk '{print $1}' |tail -1`
        while [ `tkn tr describe ${TASKRUN_NAME} -o  jsonpath='{.status.conditions[0].reason}'` != 'Succeeded' ] || [ $counter -gt $timeout ];
        do
        echo "waiting for taskRun: $(tkn tr describe --last -o  jsonpath='{.metadata.name}') to finish"
        sleep 1
        counter=$((counter+1))
        done
        if [ $counter -gt $timeout ]; then
        echo "exiting with error"
        exit 1
        fi

        # Use a specific taskrun if provided, otherwise use the latest
        TASKRUN_NAME=taskrun/$( echo $TASKRUN_NAME | sed 's#.*/##' )

        echo "Using taskRun: ${TASKRUN_NAME}"

        # Let's not hard code the image url or the registry
        IMAGE_URL=$( oc get $TASKRUN_NAME -o json | jq -r '.status.taskResults[1].value' )
        IMAGE_REGISTRY=$( echo $IMAGE_URL | cut -d/ -f1 )

        echo "Using IMAGE_URL: ${IMAGE_URL}"
        echo "Using IMAGE_REGISTRY: ${IMAGE_REGISTRY}"

        SIG_KEY="k8s://tekton-chains/signing-secrets"

        kubectl get $TASKRUN_NAME -o jsonpath="{.status.taskResults[?(@.name == \"IMAGE_URL\")].value}"

        kubectl get $TASKRUN_NAME -o jsonpath="{.status.taskResults[?(@.name == \"IMAGE_DIGEST\")].value}"

        # Save the output data to a file so we can look at it later
        # (Actually we could just pipe it to jq because the text goes to stderr I think..?)
        cosign verify --key $SIG_KEY $IMAGE_URL --output-file /tmp/verify.out
        yq e -P /tmp/verify.out

        cosign verify-attestation --key $SIG_KEY $IMAGE_URL --output-file /tmp/verify-att.out
        # There can be multiple attestations for some reason and hence multiple lines in
        # this file, which makes it invalid json. For the sake of the demo we'll ignore
        # all but the last line.
        tail -1 /tmp/verify-att.out | yq e . -P -

        tail -1 /tmp/verify-att.out | yq e .payload - | base64 -d | yq e . -P -
